<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>链表排序</title>
    <url>/2021/09/15/leetcode-148-2/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>Sort a linked list in $O(n log n)$ time using constant space complexity.<br>以$O(nlogn)$的时间复杂度和常量级别的空间复杂度对链表进行排序。</p>
<h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h1><p>题目为排序问题，排序算法大体可以分为两种：比较排序和非比较排序，其中比较排序的时间复杂度最小不会低于$O(nlogn)$，非比较排序的空间复杂度一般为$O(n)$，时间复杂度可以降低到$O(n)$，所以根据题目我们可以确定这个题目要用到的是比较排序。比较排序主要有：插入排序、归并排序、堆排序、快速排序等等，下面总结四种常见的比较排序算法的代码实现，均以数组为例。</p>
<ol>
<li>插入排序<br>插入排序就像玩扑克牌时整理牌一样，从数组的第2位(索引为1)开始，向前寻找该数字应该在的位置，直到最后一个数字，插入排序的时间复杂度为$O(n^2)$。计算方法是1+…+(n-1)的结果。（自己理解，具体的还得多记） <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertionSort</span><span class="params">(<span class="keyword">int</span>[] A)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;A.length;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> key = A[i];</span><br><span class="line">        <span class="keyword">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j&gt;=<span class="number">0</span> &amp;&amp; A[j]&gt;key)&#123;</span><br><span class="line">            A[i] = A[j];</span><br><span class="line">            i -= <span class="number">1</span>;</span><br><span class="line">            j -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        A[j+<span class="number">1</span>] = key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>归并排序<br>归并排序的思想是将数组不断分裂，直到数组只剩2个或1个元素，然后再合并，利用了递归的理念。归并排序时间复杂度的递归式为$O(n)=2O(n/2)+T(n)+D(n)$该递归式的结果为$O(nlogn)$，即时间复杂度为$O(nlogn)$。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> s, <span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(s&lt;e)&#123;</span><br><span class="line">           <span class="keyword">int</span> q = (e-s)/<span class="number">2</span> + s;</span><br><span class="line">           mergeSort(A, s, q);</span><br><span class="line">           mergeSort(A, q+<span class="number">1</span>, e);</span><br><span class="line">           Merge(A, s, q, e);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> s, <span class="keyword">int</span> q, <span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">       <span class="keyword">int</span> lLength = q - s + <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">int</span> rLength = e - q;</span><br><span class="line">       <span class="keyword">int</span>[] l = <span class="keyword">new</span> <span class="keyword">int</span>[lLength+<span class="number">1</span>];</span><br><span class="line">       <span class="keyword">int</span>[] r = <span class="keyword">new</span> <span class="keyword">int</span>[rLength+<span class="number">1</span>];</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lLength;i++)&#123;</span><br><span class="line">           l[i] = A[s+i];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;rLength;j++)&#123;</span><br><span class="line">           r[j] = A[q+j+<span class="number">1</span>];</span><br><span class="line">       &#125;</span><br><span class="line">       l[lLength] = Integer.MAX_VALUE;</span><br><span class="line">       r[rLength] = Integer.MAX_VALUE;</span><br><span class="line">       <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> k=s;k&lt;=e;k++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(l[i]&lt;r[j])&#123;</span><br><span class="line">               A[k] = l[i];</span><br><span class="line">               i += <span class="number">1</span>;</span><br><span class="line">           &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">               A[k] = r[j];</span><br><span class="line">               j += <span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
<li>堆排序<br>堆排序的思想是通过建立最大堆或最小堆来实现排序，最大堆或最小堆是一种特殊的二叉树，这种二叉树的特点是所有父节点一定大于或小于其所有孩子节点。堆排序的操作顺序为建堆—&gt;输出根节点—&gt;维护最大堆。通过这样的循环操作就可以将数组排序。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Parent</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">leftChild</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">rightChild</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">maxHeap</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> i, <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l = leftChild(i)-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> r = rightChild(i)-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> largest = i;</span><br><span class="line">        largest = getLargest(A, size, l, largest);</span><br><span class="line">        largest = getLargest(A, size, r, largest);</span><br><span class="line">        <span class="keyword">if</span>(largest!=i)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = A[largest-<span class="number">1</span>];</span><br><span class="line">            A[largest-<span class="number">1</span>] = A[i-<span class="number">1</span>];</span><br><span class="line">            A[i-<span class="number">1</span>] = tmp;</span><br><span class="line">            maxHeap(A, largest, size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getLargest</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> size, <span class="keyword">int</span> l, <span class="keyword">int</span> largest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l&lt;=size &amp;&amp; A[l]&gt;A[largest-<span class="number">1</span>])&#123;</span><br><span class="line">            largest = l + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> largest;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buildMaxHeap</span><span class="params">(<span class="keyword">int</span>[] A)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=A.length/<span class="number">2</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">            maxHeap(A, i, A.length-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] A)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = A.length-<span class="number">1</span>;</span><br><span class="line">        buildMaxHeap(A);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;A.length;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = A[<span class="number">0</span>];</span><br><span class="line">            A[<span class="number">0</span>] = A[size];</span><br><span class="line">            A[size] = tmp;</span><br><span class="line">            size -= <span class="number">1</span>;</span><br><span class="line">            maxHeap(A, <span class="number">1</span>, size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>快速排序<br>快速排序可以说是比较排序算法中时间复杂度最低的算法，相比堆排序，其时间复杂度中的系数更小。快排的思想是通过递归的方式不断找到数组中元素应该在的位置，最核心的算法就是partition方法。快排的时间复杂度为$O(nlogn)$。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> s, <span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s&lt;e)&#123;</span><br><span class="line">            <span class="keyword">int</span> q = Partition(A, s, e);</span><br><span class="line">            quickSort(A, s, q-<span class="number">1</span>);</span><br><span class="line">            quickSort(A, q+<span class="number">1</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Partition</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> s, <span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = A[e];</span><br><span class="line">        <span class="keyword">int</span> i = s-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=s;j&lt;e;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(A[j]&lt;x)&#123;</span><br><span class="line">                i += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> tmp = A[i];</span><br><span class="line">                A[i] = A[j];</span><br><span class="line">                A[j] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        A[e] = A[i+<span class="number">1</span>];</span><br><span class="line">        A[i+<span class="number">1</span>] = x;</span><br><span class="line">        <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1>本题只是将链表换为数组而已，故可以只需将排序算法稍微改变即可，思想是不变的，解题选用归并排序（因为看了评论很多人都选择了归并），与数组不同，需要通过循环找到链表的中间元素并将链表二分。代码为：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">sortList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span> || head.next==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ListNode half = getMidNode(head);</span><br><span class="line">        ListNode l1 = half.next;</span><br><span class="line">        half.next = <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Merge(sortList(head), sortList(l1));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> ListNode <span class="title">Merge</span><span class="params">(ListNode l1, ListNode l2)</span></span>&#123;</span><br><span class="line">        ListNode l = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode res = l;</span><br><span class="line">        <span class="keyword">while</span>(l1!=<span class="keyword">null</span> &amp;&amp; l2!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l1.val&lt;l2.val)&#123;</span><br><span class="line">                l.next = l1;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                l.next = l2;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            l = l.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(l1!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            l.next = l1;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(l2!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            l.next = l2;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res.next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> ListNode <span class="title">getMidNode</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode half = head;</span><br><span class="line">        <span class="keyword">while</span>(head.next!=<span class="keyword">null</span> &amp;&amp; head.next.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            half = half.next;</span><br><span class="line">            head = head.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> half;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
希望自己以后能补充上其他排序的链表实现。<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>本题涉及的就是最传统的排序算法，让我对排序算法进行了总结。除此以为，通过查看java源码，发现java在Array.sort()中使用的是TimSort排序算法，似乎在JDK7以前使用的归并排序，TimSort是2002年在Python上提出的算法，该算法结合了归并排序和插入排序，规定当数组长度小于64时使用插入，大于时使用归并，并且再归并时是将数组分成一个个run，而不是一个个元素，每个run都是原来就是升序或降序的，这样排序的效率更高。并且TimSort算法也很稳定。</li>
</ol>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树最小深度</title>
    <url>/2021/09/15/leetcode-148/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>求给定二叉树的最小深度。最小深度是指树的根结点到最近叶子结点的最短路径上结点的数量。<br>Given a binary tree, find its minimum depth.The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.</p>
<h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h1><p>首先要了解二叉树，是指树的每个节点最多只能有<strong>两个</strong>子节点，在二叉树中分别成为“左子节点”和“右子节点”。因此二叉树的每一层最多含有$2^{n-1}$个节点，$n$为节点所在层数。<br>本题为给定二叉树，求二叉树的最小深度，有两种解题思路：</p>
<ol>
<li><strong>递归</strong>，如下图所示二叉树，其最小深度可以理解为左子树和右子树中的最小的深度加1，而左右子树又可以分为新的左右子树从而计算左右子树的最小深度，直到节点为null。<br><img src="/2021/09/15/leetcode-148/binary_tree.png" alt="二叉树示例"></li>
<li><strong>遍历</strong>，树的深度为根节点到叶子节点的距离，利用遍历的方法寻找叶子节点，从所有的叶子节点中找出距离根节点最近的那个，即找到最小深度。树的遍历一般分为前、中、后序遍历和层序遍历，在本题中最好选用层序遍历。</li>
</ol>
<h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h3 id="递归解法"><a href="#递归解法" class="headerlink" title="递归解法"></a>递归解法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">run</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;    <span class="comment">//递归结束条件</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left = run(root.left);  <span class="comment">//计算左子树深度</span></span><br><span class="line">        <span class="keyword">int</span> right = run(root.right); <span class="comment">//计算右子树深度</span></span><br><span class="line">        <span class="keyword">if</span>(left*right != <span class="number">0</span>)&#123;  <span class="comment">// 若左右子树均有节点</span></span><br><span class="line">            <span class="keyword">return</span> (left&gt;right?right:left)+<span class="number">1</span>; <span class="comment">//取最小的深度加1</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123; <span class="comment">//若左子树或右子树没有节点</span></span><br><span class="line">            <span class="keyword">return</span> (left&gt;right?left:right)+<span class="number">1</span>; <span class="comment">//该子树深度为存在节点的那一边的深度加1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>递归解法代码比较简答，需要注意的是递归结束条件为节点为null，还需要判断左子树或右子树无节点的情况。时间复杂度为$O(n)$，$n$为节点数（还不太懂，还要继续学习）。</p>
<h3 id="遍历解法"><a href="#遍历解法" class="headerlink" title="遍历解法"></a>遍历解法</h3><p>首先记录二叉树的各种遍历方法：</p>
<ol>
<li><strong>前序遍历</strong><br>递归实现代码：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrderTraverse</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(root != <span class="keyword">null</span>) &#123;</span><br><span class="line">		System.out.println(root.val);</span><br><span class="line">		preOrderTraverse(root.left);</span><br><span class="line">		preOrderTraverse(root.right);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
非递归实现代码：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrderTraverse</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">	Stack&lt;TreeNode&gt; s = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">	s.push(root);</span><br><span class="line">	<span class="keyword">while</span>(!s.isEmpty()) &#123;</span><br><span class="line">		TreeNode t = s.pop();</span><br><span class="line">		<span class="keyword">while</span>(t != <span class="keyword">null</span>) &#123;</span><br><span class="line">			System.out.println(t.val);</span><br><span class="line">			<span class="keyword">if</span>(t.right != <span class="keyword">null</span>)	s.push(t.right);</span><br><span class="line">			t = t.left;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><strong>中序遍历</strong><br>递归实现代码：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">midOrderTraverse</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(root == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">		midOrderTraverse(root.left);</span><br><span class="line">		System.out.println(root.val);</span><br><span class="line">		midOrderTraverse(root.right);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
非递归实现代码：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">midOrderTraverse</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">	Stack&lt;TreeNode&gt; s = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">	<span class="keyword">while</span>(root!=<span class="keyword">null</span> || !s.isEmpty()) &#123;</span><br><span class="line">		<span class="keyword">if</span>(root != <span class="keyword">null</span>) &#123;</span><br><span class="line">			s.push(root);</span><br><span class="line">			root = root.left;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			root = s.pop();</span><br><span class="line">			System.out.println(root.val);</span><br><span class="line">			root = root.right;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><strong>后序遍历</strong><br>递归实现代码：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrderTraverse</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(root == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">		postOrderTraverse(root.left);</span><br><span class="line">		postOrderTraverse(root.right);</span><br><span class="line">		System.out.println(root.val);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
非递归实现代码：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrderTraverse</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">	Stack&lt;TreeNode&gt; s = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">	Stack&lt;Integer&gt; tag = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">	<span class="keyword">while</span>(root!=<span class="keyword">null</span> || !s.isEmpty()) &#123;</span><br><span class="line">		<span class="keyword">while</span>(root != <span class="keyword">null</span>) &#123;</span><br><span class="line">			s.push(root);</span><br><span class="line">			tag.push(<span class="number">0</span>);</span><br><span class="line">			root = root.left;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(!s.isEmpty() &amp;&amp; tag.peek()==<span class="number">1</span>)&#123;</span><br><span class="line">			tag.pop();</span><br><span class="line">			System.out.println(s.pop().val);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(!s.isEmpty() &amp;&amp; tag.peek()==<span class="number">0</span>)&#123;</span><br><span class="line">			tag.pop();</span><br><span class="line">			tag.push(<span class="number">1</span>);</span><br><span class="line">			root = s.peek().right;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><strong>层序遍历</strong><br>非递归实现代码：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">levelOrderTraverse</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">	Queue&lt;TreeNode&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">	q.offer(root);</span><br><span class="line">	<span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">		TreeNode t = q.poll();</span><br><span class="line">		System.out.println(t.val);</span><br><span class="line">		<span class="keyword">if</span>(t.left!=<span class="keyword">null</span>) q.offer(t.left);</span><br><span class="line">		<span class="keyword">if</span>(t.right!=<span class="keyword">null</span>) q.offer(t.right);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
利用层序遍历求二叉树的最小深度：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">run</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.left==<span class="keyword">null</span> &amp;&amp; root.right==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> depth = <span class="number">0</span>;</span><br><span class="line">        Queue&lt;TreeNode&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        q.offer(root);</span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> len = q.size();</span><br><span class="line">            depth++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">                TreeNode t = q.poll();</span><br><span class="line">                <span class="keyword">if</span>(t.left==<span class="keyword">null</span> &amp;&amp; t.right==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> depth;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(t.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    q.offer(t.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(t.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    q.offer(t.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
算法时间复杂度为$O(n)$.<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>这道题涉及二叉树的相关知识，学习到了二叉树的遍历方法（递归与非递归），也了解了有关递归解题的方法，需要坚持把148题总结完！！！有关算法复杂度的计算也要继续学习。</li>
</ol>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>树</tag>
      </tags>
  </entry>
</search>
